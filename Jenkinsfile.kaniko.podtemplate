podTemplate(
  label: 'arm-pod', 
  containers: [
    containerTemplate(name: 'docker', image: 'docker:stable', command: 'cat', ttyEnabled: true),
  ], 
  volumes: [hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'), ]
) {
  node('arm-pod') {
    try {
      stage('Get source code') {
        echo 'Getting source code...'
        checkout scm
        parts = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim().split('\n')
        commitMessage = parts[0]
      }
      
      envName = 'stage'
      build()
    
    } catch (exc) {
      currentBuild.result = 'FAILURE'
      echo 'I failed'
      echo exc.getMessage()
    } finally {
      echo 'One way or another, I have finished'
      if (currentBuild.result == 'SUCCESS') {
        echo 'Build successful'
      } else if (currentBuild.result == 'FAILURE') {
        echo 'I failed :('
      }
    }
  }
}

def build() {
  echo "Process build for ${env.BRANCH_NAME} branch"
  prefixPod = "khoao-be"
  namespace = "swm"
  
  stage('Build docker') {
    // container('awscli') {
    //   DOCKER_LOGIN = sh(
    //     script: 'aws ecr get-login --no-include-email --region ap-southeast-1',
    //     returnStdout: true
    //   ).trim()
    // }

    container('docker') {
      // REGISTRY_URL = """744004065806.dkr.ecr.ap-southeast-1.amazonaws.com/${prefixPod}:${envName}"""
      
      script {
        withCredentials([
          usernamePassword(credentialsId: 'private-artifactory',
            usernameVariable: 'username',
            passwordVariable: 'password')
        ]) {
          print 'username=' + username + 'password=' + password
          DOCKER_ID=username
          REGISTRY_URL = """${DOCKER_ID}/test-buildx:latest"""

          sh 'echo $password | docker login -u $username --password-stdin'

          sh """
            docker run \
              -v "$HOME"/.config/gcloud:/root/.config/gcloud \
              -v $(pwd)/reactjs:/workspace \
              gcr.io/kaniko-project/executor:latest \
              --dockerfile /workspace/Dockerfile \
              --destination "${REGISTRY_URL}" \
              --context dir:///workspace/
          """
        }
      }
    }
  }
}
