podTemplate(
  label: 'arm-pod', 
  containers: [
    containerTemplate(name: 'docker', image: 'jonoh/docker-buildx-qemu', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'kubectl', image: 'public.ecr.aws/smartlog/roffe/kubectl:v1.13.2', command: 'cat', ttyEnabled: true), 
    containerTemplate(name: 'awscli', image: 'public.ecr.aws/smartlog/atlassian/pipelines-awscli:1.18.190', command: 'cat', ttyEnabled: true), 
  ], 
  volumes: [hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'), ]
) {
  node('arm-pod') {
    try {
      stage('Get source code') {
        echo 'Getting source code...'
        checkout scm
        parts = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim().split('\n')
        commitMessage = parts[0]
      }
      
      envName = 'stage'
      build()
    
    } catch (exc) {
      currentBuild.result = 'FAILURE'
      echo 'I failed'
      echo exc.getMessage()
    } finally {
      echo 'One way or another, I have finished'
      if (currentBuild.result == 'SUCCESS') {
        echo 'Build successful'
      } else if (currentBuild.result == 'FAILURE') {
        echo 'I failed :('
      }
    }
  }
}

def build() {
  echo "Process build for ${env.BRANCH_NAME} branch"
  prefixPod = "khoao-be"
  namespace = "swm"
  
  stage('Build docker') {
    // container('awscli') {
    //   DOCKER_LOGIN = sh(
    //     script: 'aws ecr get-login --no-include-email --region ap-southeast-1',
    //     returnStdout: true
    //   ).trim()
    // }

    container('docker') {
      // REGISTRY_URL = """744004065806.dkr.ecr.ap-southeast-1.amazonaws.com/${prefixPod}:${envName}"""
      
      script {
         
        

          sh 'echo $password | docker login -u $username --password-stdin'

          sh """
            docker buildx create --use --name mybuilder --driver-opt network=host --buildkitd-flags '--allow-insecure-entitlement network.host'
            docker buildx inspect --bootstrap
            docker buildx build --network host --platform linux/amd64,linux/arm64 -t ${REGISTRY_URL} --allow network.host  --pull=true -f reactjs/Dockerfile .
          """
        
      }
    }
  }
}
